/*
 * DisplayController: manage content display on device
 * Copyright (c) 2017 Shenghua Su
 *
 */

#include "DisplayController.h"
#include "SNTP.h"
#include "System.h"
#include "AppLog.h"

static const uint8_t airplaneIcon [] = { // 24 x 24
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x60, 0x00, 0x00, 
0x70, 0x00, 0x00, 0x30, 0x00, 0x00, 0x38, 0x00, 0x00, 0x38, 0x00, 0x20, 0x3c, 0x00, 0x10, 0x3c, 
0x00, 0x1f, 0xff, 0xfc, 0x1f, 0xff, 0xfc, 0x10, 0x1c, 0x00, 0x20, 0x3c, 0x00, 0x00, 0x38, 0x00, 
0x00, 0x38, 0x00, 0x00, 0x30, 0x00, 0x00, 0x70, 0x00, 0x00, 0x60, 0x00, 0x00, 0x40, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

static const uint8_t wifiIcon [] = { // 24 x 24
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x80, 0x07, 0xff, 0xe0, 0x1f, 
0xff, 0xf8, 0x3e, 0x00, 0x7c, 0x78, 0x3c, 0x1e, 0x71, 0xff, 0x8e, 0x03, 0xff, 0xc0, 0x0f, 0xc3, 
0xf0, 0x0f, 0x00, 0xf0, 0x0c, 0x7e, 0x30, 0x00, 0xff, 0x00, 0x01, 0xff, 0x80, 0x01, 0xc3, 0x80, 
0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

static const uint8_t nowifiIcon [] = { // 24 x 24
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x3c, 0x80, 0x07, 0x7c, 0xe0, 0x1f, 
0x7e, 0xf8, 0x3e, 0x7e, 0x7c, 0x78, 0x7c, 0x1e, 0x71, 0x3c, 0x8e, 0x03, 0x3c, 0xc0, 0x0f, 0xbd, 
0xf0, 0x0f, 0x3c, 0xf0, 0x0c, 0x3c, 0x30, 0x00, 0x99, 0x00, 0x01, 0xdb, 0x80, 0x01, 0xc3, 0x80, 
0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

static const uint8_t apConnectedIcon [] = { // 24 x 24
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x02, 0x3c, 0x40, 0x07, 
0x7e, 0xe0, 0x0f, 0xff, 0xf0, 0x07, 0xff, 0xe0, 0x03, 0xc3, 0xc0, 0x07, 0x81, 0xe0, 0x1f, 0x18, 
0xf8, 0x1f, 0x3c, 0xf8, 0x1f, 0x38, 0xf8, 0x1f, 0x10, 0xf8, 0x07, 0x81, 0xe0, 0x03, 0xc3, 0xc0, 
0x07, 0xff, 0xe0, 0x0f, 0xff, 0xf0, 0x07, 0x7e, 0xe0, 0x02, 0x3c, 0x40, 0x00, 0x3c, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

static const uint8_t apNotConnectedIcon [] = { // 24 x 24
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00, 0x06, 
0x18, 0x60, 0x0e, 0x18, 0x70, 0x06, 0x18, 0x60, 0x03, 0x18, 0xc0, 0x07, 0x00, 0xe0, 0x1f, 0x18, 
0xf8, 0x1f, 0x3c, 0xf8, 0x1f, 0x38, 0xf8, 0x1f, 0x10, 0xf8, 0x07, 0x81, 0xe0, 0x03, 0xc3, 0xc0, 
0x07, 0xff, 0xe0, 0x0f, 0xff, 0xf0, 0x07, 0x7e, 0xe0, 0x02, 0x3c, 0x40, 0x00, 0x3c, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

static const uint8_t batShellIcon [] = { // 40 x 16
0x3f, 0xff, 0xff, 0xff, 0xe0, 0x70, 0x00, 0x00, 0x00, 0x70, 0x60, 0x00, 0x00, 0x00, 0x30, 0x60, 
0x00, 0x00, 0x00, 0x10, 0x60, 0x00, 0x00, 0x00, 0x1c, 0x60, 0x00, 0x00, 0x00, 0x1e, 0x60, 0x00, 
0x00, 0x00, 0x1e, 0x60, 0x00, 0x00, 0x00, 0x1e, 0x60, 0x00, 0x00, 0x00, 0x1e, 0x60, 0x00, 0x00, 
0x00, 0x1e, 0x60, 0x00, 0x00, 0x00, 0x1e, 0x60, 0x00, 0x00, 0x00, 0x1c, 0x60, 0x00, 0x00, 0x00, 
0x10, 0x60, 0x00, 0x00, 0x00, 0x30, 0x70, 0x00, 0x00, 0x00, 0x70, 0x3f, 0xff, 0xff, 0xff, 0xe0 };

static const uint8_t chargeIcon [] = { // 32 x 16
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x1f, 0xff, 0xe0, 0x00, 0x0f, 0xff, 0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x07, 0xc0, 0x00, 
0x00, 0x03, 0xe0, 0x00, 0x00, 0x3f, 0xf0, 0x00, 0x01, 0xff, 0xf0, 0x00, 0x0f, 0xff, 0xf8, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

static DisplayController *_activeDisplayController = NULL;

#define DEFAULT_STATUS_BAR_HEIGHT 24

DisplayController * DisplayController::activeInstance()
{
  return _activeDisplayController;
}

const uint8_t * _connectedIcon = NULL;
const uint8_t * _notConnectedIcon = NULL;

DisplayController::DisplayController(DisplayGFX *dev)
: _updateDisabled(false)
, _networkState(NetworkOff)
, _networkIconNeedUpdate(true)
, _timeNeedUpdate(true)
, _batteryNeedUpdate(true)
, _batteryCharge(false)
, _batteryLevel(1)
, _contentOffsetY(DEFAULT_STATUS_BAR_HEIGHT + 15)
, _dev(dev)
{
  _activeDisplayController = this;
}

void DisplayController::init(int displayInitMode)
{
  APP_LOGI("[DisplayController]", "init");
  DeployMode deployMode = System::instance()->deployMode();
  if (deployMode == MQTTClientMode || deployMode == MQTTClientAndHTTPServerMode) {
    _connectedIcon = wifiIcon;
    _notConnectedIcon = nowifiIcon;

  }
  else if (deployMode == HTTPServerMode) {
    _connectedIcon = apConnectedIcon;
    _notConnectedIcon = apNotConnectedIcon;
  }
}

void DisplayController::update()
{
  updateStatusBar();
}

#define TIM_OFFSET_FROM_M        35
#define BAT_BDR_OFFSET_FROM_R    50
#define BAT_CHARGE_ICON_WIDTH    32
static char strftime_buf[8];

void DisplayController::updateStatusBar(bool foreUpdateAll)
{
  // wifi connection icon
  if (foreUpdateAll || _networkIconNeedUpdate) {
    const uint8_t *icon = NULL;
    if (_networkState == NetworkOff) icon = airplaneIcon;
    else if (_networkState == NetworkConnected) icon = _connectedIcon;
    else icon = _notConnectedIcon;
    _dev->drawBitmap(2, 2, icon, 24, 24,
                     _networkState == NetworkConnected ? RGB565_WEAKWHITE : RGB565_ORANGE, RGB565_BLACK);
    _networkIconNeedUpdate = false;
  }

  // time
  if ( (foreUpdateAll || _timeNeedUpdate) && SNTP::synced() ) {
    _dev->setCursor(_dev->width()/2 - TIM_OFFSET_FROM_M, 8);
    _dev->setTextSize(2);
    _dev->setTextColor(RGB565_WEAKWHITE, RGB565_BLACK);
    SNTP::setTimezone("CST-8CDT-9,M4.2.0/2,M9.2.0/3");
    strftime(strftime_buf, sizeof(strftime_buf), "%H:%M", &SNTP::timeInfo(SNTP::timeNow()));
    _dev->write(strftime_buf);
    _timeNeedUpdate = false;
  }

  // battery
  if (foreUpdateAll || _batteryNeedUpdate) {
    // base x offset
    uint16_t x = _dev->width() - BAT_BDR_OFFSET_FROM_R;
    // charge state
    if (_batteryCharge)
      _dev->drawBitmap(x - BAT_CHARGE_ICON_WIDTH, 7, chargeIcon, BAT_CHARGE_ICON_WIDTH, 16, RGB565_WEAKWHITE);
    else
      _dev->fillRect(x - BAT_CHARGE_ICON_WIDTH, 7, BAT_CHARGE_ICON_WIDTH, 16, RGB565_BLACK);
    // battery shell
    _dev->drawBitmap(x, 7, batShellIcon, 40, 16, RGB565_WEAKWHITE);
    // battery level
    if (_batteryLevel <= 0) _batteryLevel = 1;
    else if (_batteryLevel > 100) _batteryLevel = 100;
    uint16_t w = (uint16_t)(28 * _batteryLevel / 100.0f);
    uint16_t color = RGB565_GREEN;
    if (_batteryLevel < 20) color = RGB565_RED;
    else if (_batteryLevel < 50) color = RGB565_YELLOW;
    _dev->fillRect(x + 5, 10, w, 10, color);
    _dev->fillRect(x + 5 + w, 10, 28 - w, 10, RGB565_BLACK);
    _batteryNeedUpdate = false;
  }
}
