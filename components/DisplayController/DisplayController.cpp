/*
 * DisplayController: manage content display on device
 * Copyright (c) 2017 Shenghua Su
 *
 */

#include "DisplayController.h"
#include "SNTP.h"

static const uint8_t wifiIcon [] = { // 24 x 24
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x80, 0x07, 0xff, 0xe0, 0x1f, 
0xff, 0xf8, 0x3e, 0x00, 0x7c, 0x78, 0x3c, 0x1e, 0x71, 0xff, 0x8e, 0x03, 0xff, 0xc0, 0x0f, 0xc3, 
0xf0, 0x0f, 0x00, 0xf0, 0x0c, 0x7e, 0x30, 0x00, 0xff, 0x00, 0x01, 0xff, 0x80, 0x01, 0xc3, 0x80, 
0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

static const uint8_t nowifiIcon [] = { // 24 x 24
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x3c, 0x80, 0x07, 0x7c, 0xe0, 0x1f, 
0x7e, 0xf8, 0x3e, 0x7e, 0x7c, 0x78, 0x7c, 0x1e, 0x71, 0x3c, 0x8e, 0x03, 0x3c, 0xc0, 0x0f, 0xbd, 
0xf0, 0x0f, 0x3c, 0xf0, 0x0c, 0x3c, 0x30, 0x00, 0x99, 0x00, 0x01, 0xdb, 0x80, 0x01, 0xc3, 0x80, 
0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

static const uint8_t batShellIcon [] = { // 40 x 16
0x3f, 0xff, 0xff, 0xff, 0xe0, 0x70, 0x00, 0x00, 0x00, 0x70, 0x60, 0x00, 0x00, 0x00, 0x30, 0x60, 
0x00, 0x00, 0x00, 0x10, 0x60, 0x00, 0x00, 0x00, 0x1c, 0x60, 0x00, 0x00, 0x00, 0x1e, 0x60, 0x00, 
0x00, 0x00, 0x1e, 0x60, 0x00, 0x00, 0x00, 0x1e, 0x60, 0x00, 0x00, 0x00, 0x1e, 0x60, 0x00, 0x00, 
0x00, 0x1e, 0x60, 0x00, 0x00, 0x00, 0x1e, 0x60, 0x00, 0x00, 0x00, 0x1c, 0x60, 0x00, 0x00, 0x00, 
0x10, 0x60, 0x00, 0x00, 0x00, 0x30, 0x70, 0x00, 0x00, 0x00, 0x70, 0x3f, 0xff, 0xff, 0xff, 0xe0 };

static DisplayController *_activeDisplayController = NULL;

#define DEFAULT_STATUS_BAR_HEIGHT 24

DisplayController * DisplayController::activeInstance()
{
  return _activeDisplayController;
}

DisplayController::DisplayController(DisplayGFX *dev)
: _wifiIconNeedUpdate(true)
, _wifiConnected(false)
, _timeNeedUpdate(true)
, _batterNeedUpdate(true)
, _contentOffsetY(DEFAULT_STATUS_BAR_HEIGHT + 15)
, _batteryLevel(80)
, _dev(dev)
{
  _activeDisplayController = this;
}

void DisplayController::update()
{
  updateStatusBar();
}

static char strftime_buf[8];

void DisplayController::updateStatusBar(bool foreUpdateAll)
{
  // wifi connection icon
  if (foreUpdateAll || _wifiIconNeedUpdate) {
    _dev->drawBitmap(2, 2, _wifiConnected ? wifiIcon : nowifiIcon, 24, 24, 
                     _wifiConnected ? RGB565_WEAKWHITE : RGB565_ORANGE, RGB565_BLACK);
    _wifiIconNeedUpdate = false;
  }

  // time
  if (foreUpdateAll || _timeNeedUpdate) {
    _dev->setCursor(85, 8);
    _dev->setTextSize(2);
    _dev->setTextColor(RGB565_WEAKWHITE, RGB565_BLACK);
    SNTP::setTimezone("CST-8CDT-9,M4.2.0/2,M9.2.0/3");
    strftime(strftime_buf, sizeof(strftime_buf), "%H:%M", &SNTP::timeInfo(SNTP::timeNow()-3600)); // -3600 otherwise 1 hour ahead
    _dev->write(strftime_buf);
    _timeNeedUpdate = false;
  }

  // battery
  if (foreUpdateAll || _batterNeedUpdate) {
    _dev->drawBitmap(190, 7, batShellIcon, 40, 16, RGB565_WEAKWHITE);
    if (_batteryLevel <= 0) _batteryLevel = 1;
    else if (_batteryLevel > 100) _batteryLevel = 100;
    uint16_t w = (uint16_t)(28 * _batteryLevel / 100.0f);
    uint16_t color = RGB565_GREEN;
    if (_batteryLevel < 20) color = RGB565_RED;
    else if (_batteryLevel < 50) color = RGB565_YELLOW;
    _dev->fillRect(195, 10, w, 10, color);
    _dev->fillRect(195 + w, 10, 28 - w, 10, RGB565_BLACK);
    _batterNeedUpdate = false;
  }
}
